// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entites._Agency.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Copyright")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencyCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ExchangeRateToMXN")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgencyCurrencies");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencyCurrencyComposition", b =>
                {
                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdAgencyCurrency")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IdAgency", "IdAgencyCurrency");

                    b.HasIndex("IdAgencyCurrency");

                    b.ToTable("AgencyCurrencyCompositions");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencySocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgencySocials");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencySocialComposition", b =>
                {
                    b.Property<int>("IdAgencySocial")
                        .HasColumnType("int");

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IdAgencySocial", "IdAgency");

                    b.HasIndex("IdAgency");

                    b.ToTable("AgencySocialCompositions");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeCarousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("HomeCarousels");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludesFlights")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesHotel")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludesTransportation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("MoreInfoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("HomeOffers");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeTourPopularComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PopularType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTour");

                    b.ToTable("HomeTourPopularCompositions");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherContactForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactDateTimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditedDateTimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("OtherContactForms");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("OtherGalleries");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherPrivacyNotice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LastEditedDate")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency")
                        .IsUnique();

                    b.ToTable("OtherPrivacyNotices");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherTermsCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<DateOnly>("LastEditedDate")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency")
                        .IsUnique();

                    b.ToTable("OtherTermsConditions");
                });

            modelBuilder.Entity("Core.Entites._Tour.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("DurationType")
                        .HasColumnType("int");

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTourDirection")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit");

                    b.Property<string>("LinkPDFItinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTourDirection");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("TourCategories");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourCategoryComposition", b =>
                {
                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<int>("IdTourCategory")
                        .HasColumnType("int");

                    b.HasKey("IdTour", "IdTourCategory");

                    b.HasIndex("IdTourCategory");

                    b.ToTable("TourCategoryCompositions");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourClassPricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdultsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<bool?>("AllowInfants")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowMinors")
                        .HasColumnType("bit");

                    b.Property<bool?>("InfantsCountAsSeats")
                        .HasColumnType("bit");

                    b.Property<decimal>("InfantsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<int?>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("MinorsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TourClassPricings");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDatePricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllowInfants")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowMinors")
                        .HasColumnType("bit");

                    b.Property<bool>("AreSettingsGlobal")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<bool?>("InfantsCountAsSeats")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<int>("RepeatType")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdTour");

                    b.ToTable("TourDatePricings");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDatePricingComposition", b =>
                {
                    b.Property<int>("IdTourClassPricing")
                        .HasColumnType("int");

                    b.Property<int>("IdTourDatePricing")
                        .HasColumnType("int");

                    b.HasKey("IdTourClassPricing", "IdTourDatePricing");

                    b.HasIndex("IdTourDatePricing");

                    b.ToTable("TourDatePricingCompositions");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("TourDirections");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourGalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTour");

                    b.ToTable("TourGalleryImages");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourInclude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<int>("IncludeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTour");

                    b.ToTable("TourIncludes");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourItinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTour");

                    b.ToTable("TourItineraries");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourNotWorkingDay", b =>
                {
                    b.Property<int>("IdTourDatePricing")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.HasKey("IdTourDatePricing", "Day");

                    b.ToTable("TourNotWorkingDays");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourRepeatSpecificDate", b =>
                {
                    b.Property<int>("IdTourDatePricing")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.HasKey("IdTourDatePricing", "Day");

                    b.ToTable("TourRepeatSpecificDates");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdultsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AdultsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTourClassPricing")
                        .HasColumnType("int");

                    b.Property<bool>("InfantsCountAsSeat")
                        .HasColumnType("bit");

                    b.Property<decimal>("InfantsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditedDateTimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinorsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinorsPricinginMXN")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfInfants")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfMinors")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentDayTimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationDateTimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalOcupiedSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPricePaid")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTourClassPricing");

                    b.ToTable("TourReservations");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSearchQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.ToTable("TourSearchQueries");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSearchQueryComposition", b =>
                {
                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.Property<int>("IdTourSearchQuery")
                        .HasColumnType("int");

                    b.HasKey("IdTour", "IdTourSearchQuery");

                    b.HasIndex("IdTourSearchQuery");

                    b.ToTable("TourSearchQueryCompositions");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSimilar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdAgency")
                        .HasColumnType("int");

                    b.Property<int>("IdTour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAgency");

                    b.HasIndex("IdTour");

                    b.ToTable("TourSimilars");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencyCurrencyComposition", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("AgencyCurrencyCompositions")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Agency.AgencyCurrency", "Currency")
                        .WithMany()
                        .HasForeignKey("IdAgencyCurrency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Core.Entites._Agency.AgencySocialComposition", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("AgencySocialCompositions")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Agency.AgencySocial", "Social")
                        .WithMany()
                        .HasForeignKey("IdAgencySocial")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeCarousel", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("HomeCarousels")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeOffer", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("HomeOffers")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Home.HomeTourPopularComposition", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("HomeTourPopularCompositions")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherContactForm", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("OtherContactForms")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherGallery", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany("OtherGalleries")
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherPrivacyNotice", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithOne("OtherPrivacyNotice")
                        .HasForeignKey("Core.Entites._Other.OtherPrivacyNotice", "IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Other.OtherTermsCondition", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithOne("OtherTermsCondition")
                        .HasForeignKey("Core.Entites._Other.OtherTermsCondition", "IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Tour.Tour", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.TourDirection", "TourDirection")
                        .WithMany("Tours")
                        .HasForeignKey("IdTourDirection")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("TourDirection");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourCategory", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourCategoryComposition", b =>
                {
                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourCategoryCompositions")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.TourCategory", "TourCategory")
                        .WithMany()
                        .HasForeignKey("IdTourCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("TourCategory");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDatePricing", b =>
                {
                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourDatePricings")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDatePricingComposition", b =>
                {
                    b.HasOne("Core.Entites._Tour.TourClassPricing", "TourClassPricing")
                        .WithMany()
                        .HasForeignKey("IdTourClassPricing")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.TourDatePricing", "TourDatePricing")
                        .WithMany("TourDatePricingCompositions")
                        .HasForeignKey("IdTourDatePricing")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourClassPricing");

                    b.Navigation("TourDatePricing");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDirection", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourGalleryImage", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourGalleryImages")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourInclude", b =>
                {
                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourIncludes")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourItinerary", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourItineraries")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourNotWorkingDay", b =>
                {
                    b.HasOne("Core.Entites._Tour.TourDatePricing", "TourDatePricing")
                        .WithMany("TourNotWorkingDays")
                        .HasForeignKey("IdTourDatePricing")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourDatePricing");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourRepeatSpecificDate", b =>
                {
                    b.HasOne("Core.Entites._Tour.TourDatePricing", "TourDatePricing")
                        .WithMany("TourRepeatSpecificDates")
                        .HasForeignKey("IdTourDatePricing")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourDatePricing");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourReservation", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.TourClassPricing", "TourClassPricing")
                        .WithMany()
                        .HasForeignKey("IdTourClassPricing")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("TourClassPricing");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSearchQuery", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSearchQueryComposition", b =>
                {
                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourSearchQueryCompositions")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.TourSearchQuery", "TourSearchQuery")
                        .WithMany()
                        .HasForeignKey("IdTourSearchQuery")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("TourSearchQuery");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourSimilar", b =>
                {
                    b.HasOne("Core.Entites._Agency.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("IdAgency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entites._Tour.Tour", "Tour")
                        .WithMany("TourSimilar")
                        .HasForeignKey("IdTour")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entites._Agency.Agency", b =>
                {
                    b.Navigation("AgencyCurrencyCompositions");

                    b.Navigation("AgencySocialCompositions");

                    b.Navigation("HomeCarousels");

                    b.Navigation("HomeOffers");

                    b.Navigation("HomeTourPopularCompositions");

                    b.Navigation("OtherContactForms");

                    b.Navigation("OtherGalleries");

                    b.Navigation("OtherPrivacyNotice");

                    b.Navigation("OtherTermsCondition");
                });

            modelBuilder.Entity("Core.Entites._Tour.Tour", b =>
                {
                    b.Navigation("TourCategoryCompositions");

                    b.Navigation("TourDatePricings");

                    b.Navigation("TourGalleryImages");

                    b.Navigation("TourIncludes");

                    b.Navigation("TourItineraries");

                    b.Navigation("TourSearchQueryCompositions");

                    b.Navigation("TourSimilar");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDatePricing", b =>
                {
                    b.Navigation("TourDatePricingCompositions");

                    b.Navigation("TourNotWorkingDays");

                    b.Navigation("TourRepeatSpecificDates");
                });

            modelBuilder.Entity("Core.Entites._Tour.TourDirection", b =>
                {
                    b.Navigation("Tours");
                });
#pragma warning restore 612, 618
        }
    }
}
